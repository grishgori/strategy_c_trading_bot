name: Strategy C Trading Bot New
on:
  workflow_dispatch:
  schedule:
    # Year-round schedule that works in both EST (winter) and EDT (summer)
    # Summer (EDT): 10:30 AM, 12:30 PM, 2:30 PM, 3:30 PM, 3:45 PM EDT  
    # Winter (EST): 9:30 AM, 11:30 AM, 1:30 PM, 2:30 PM, 2:45 PM EST
    - cron: '30 14 * * 1-5'  # Run 1: Early market scan
    - cron: '30 16 * * 1-5'  # Run 2: Mid-morning scan  
    - cron: '30 18 * * 1-5'  # Run 3: Afternoon scan
    - cron: '30 19 * * 1-5'  # Run 4: Late afternoon scan
    - cron: '45 19 * * 1-5'  # Run 5: Final scan before close

jobs:
  trade:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for committing state back to repo
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install packages
      run: pip install yfinance pandas numpy
      
    - name: Load previous trading state
      run: |
        echo "üîç Checking for previous trading state..."
        if [ -f "trading_state.json" ]; then
          echo "‚úÖ Found previous trading state:"
          ls -la *.json 2>/dev/null || echo "No JSON files found"
          echo "üìä Previous state summary:"
          python -c "
        import json
        try:
          with open('trading_state.json', 'r') as f:
            state = json.load(f)
          print(f'Balance: \${state.get(\"current_balance\", 1000):.0f}')
          print(f'Positions: {len(state.get(\"positions\", {}))}')
          print(f'Total trades: {len(state.get(\"trade_history\", []))}')
          print(f'Last update: {state.get(\"last_update\", \"Never\")}')
        except:
          print('No valid previous state found')
          " 2>/dev/null || echo "No previous state to load"
        else
          echo "üÜï No previous state found - starting fresh"
        fi
        
    - name: Run trading bot
      run: python trading_bot.py
      
    - name: Display trading results
      run: |
        echo "üìä Current trading session results:"
        if [ -f "trading_diary.json" ]; then
          python -c "
        import json
        try:
          with open('trading_diary.json', 'r') as f:
            diary = json.load(f)
          perf = diary.get('portfolio_performance', {})
          stats = diary.get('trading_stats', {})
          print(f'üí∞ Portfolio Value: \${perf.get(\"total_portfolio_value\", 0):.0f}')
          print(f'üìà Total Return: {perf.get(\"total_return_pct\", 0):+.1f}%')
          print(f'üî¢ Open Positions: {stats.get(\"open_positions\", 0)}')
          print(f'‚úÖ Completed Trades: {stats.get(\"completed_trades\", 0)}')
          print(f'üéØ Win Rate: {stats.get(\"win_rate\", 0):.1f}%')
        except Exception as e:
          print(f'Error reading results: {e}')
          " 2>/dev/null || echo "Could not read trading diary"
        fi
        
    - name: Commit and push trading state
      run: |
        # Configure git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are changes to commit
        if [ -f "trading_state.json" ] || [ -f "trading_diary.json" ]; then
          echo "üíæ Saving trading state back to repository..."
          
          # Add the JSON files
          git add *.json 2>/dev/null || echo "No JSON files to add"
          
          # Check if there are changes
          if ! git diff --staged --quiet; then
            # Create commit with timestamp
            TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
            git commit -m "ü§ñ Update trading state - $TIMESTAMP

üìä Automated trading state update
üîÑ Batch run completed
üíæ State preserved for next run

Generated by GitHub Actions"
            
            # Push changes
            git push
            echo "‚úÖ Trading state saved successfully!"
          else
            echo "‚ÑπÔ∏è  No changes to commit"
          fi
        else
          echo "‚ö†Ô∏è  No state files to save"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: trading-results-${{ github.run_number }}
        path: |
          *.json
          
    - name: Final status summary
      run: |
        echo ""
        echo "üéØ Trading Bot Run Complete!"
        echo "=========================="
        if [ -f "trading_state.json" ]; then
          python -c "
        import json
        from datetime import datetime
        try:
          with open('trading_state.json', 'r') as f:
            state = json.load(f)
          
          balance = state.get('current_balance', 1000)
          positions = state.get('positions', {})
          trades = state.get('trade_history', [])
          
          print(f'üí∞ Current Balance: \${balance:.0f}')
          print(f'üìç Open Positions: {len(positions)}')
          print(f'üìà Total Trades: {len(trades)}')
          print(f'üïê Next Run: Next scheduled time')
          print(f'üíæ State: Saved to repository')
          
          if positions:
            print('üìä Current Holdings:')
            for symbol, pos in list(positions.items())[:5]:  # Show first 5
              print(f'   {symbol}: {pos[\"shares\"]} shares @ \${pos[\"entry_price\"]:.2f}')
            if len(positions) > 5:
              print(f'   ... and {len(positions) - 5} more positions')
              
        except Exception as e:
          print(f'Error: {e}')
          " 2>/dev/null
        else
          echo "‚ö†Ô∏è  No state file found"
        fi
